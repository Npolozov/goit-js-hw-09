{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SACvCC,QAAQC,IAAIJ,GAGZA,EAAQK,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAErBC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAClC,GAAIF,GAAc,GAAKG,GAAa,GAAKC,GAAe,EACtD,OAAOrB,EAAAsB,OAAOC,QAAQ,kCAG1B,IAAK,IAAIC,EAAW,EAAGA,EAAWH,EAAaG,GAAY,EACzDC,EAAe,CAACC,SAAAF,EAAUP,eACzBU,MAAK,SAAAC,G,IAAGF,EAAQE,EAARF,SAAeE,EAALd,MACjBd,EAAAsB,OAAOO,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAiBI,OAAXb,EAAW,SACjEA,GAAcG,GAChBW,OAAM,SAAAH,G,IAAGF,EAAQE,EAARF,SAAeE,EAALd,MAClBd,EAAAsB,OAAOC,QAAQ,sBAAqCO,OAAfJ,EAAS,QAAiBI,OAAXb,EAAW,SAC9DA,GAAcG,GAEnB,SAASK,EAAcG,G,IAACF,EAADE,EAACF,SAAUZ,EAAXc,EAAWd,MAC1BkB,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACLN,EACFI,EAAQ,CAAEV,WAAUZ,UAEpBuB,EAAO,CAAEX,WAAUZ,YAEpBG,U","sources":["src/js/03-promises.js"],"sourcesContent":["import {Notify} from \"notiflix\";\n\nconst formRef = document.querySelector('.form');\nconsole.log(formRef);\n\n\nformRef.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault(); \n\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n  const delayInput = Number(delay.value);\n  const stepInput = Number(step.value);\n  const amountInput = Number(amount.value);\n  if (delayInput <= 0 || stepInput <= 0 || amountInput <= 0) {\n    return Notify.failure(\"Please fill in all the fields!\");\n  }\n  \nfor (let position = 0; position < amountInput; position += 1) {\n  createPromise(({position, delayInput}))\n  .then(({ position, delay }) => { \n    Notify.success(`✅ Fulfilled promise ${position} in ${delayInput}ms`);\n  }, delayInput += stepInput)\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delayInput}ms`);\n  }, delayInput += stepInput);\n}\nfunction createPromise({position, delay}) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delayInput);\n});\n}\n};\n\n\n\n\n\n\n\n\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","console","log","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","delayInput","Number","value","stepInput","amountInput","Notify","failure","position1","createPromise","position","then","param","success","concat","catch","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.2ed0cddc.js.map"}